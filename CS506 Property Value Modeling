{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "%matplotlib inline\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.tree import DecisionTreeRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as pl\n",
    "import numpy as np\n",
    "from sklearn.model_selection import learning_curve\n",
    "from sklearn.model_selection import validation_curve\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.model_selection import ShuffleSplit, train_test_split\n",
    "\n",
    "def ModelLearning(X, y):\n",
    "    \"\"\" Calculates the performance of several models with varying sizes of training data.\n",
    "        The learning and testing scores for each model are then plotted. \"\"\"\n",
    "\n",
    "    # Create 10 cross-validation sets for training and testing\n",
    "    cv = ShuffleSplit(n_splits = 10, test_size = 0.2, random_state = 0)\n",
    "\n",
    "    # Generate the training set sizes increasing by 50\n",
    "    train_sizes = np.rint(np.linspace(1, X.shape[0]*0.8 - 1, 9)).astype(int)\n",
    "\n",
    "    # Create the figure window\n",
    "    fig = pl.figure(figsize=(10,7))\n",
    "\n",
    "    # Create three different models based on max_depth\n",
    "    for k, depth in enumerate([1,3,6,10]):\n",
    "\n",
    "        # Create a Decision tree regressor at max_depth = depth\n",
    "        regressor = DecisionTreeRegressor(max_depth = depth)\n",
    "\n",
    "        # Calculate the training and testing scores\n",
    "        sizes, train_scores, test_scores = learning_curve(regressor, X, y, \\\n",
    "            cv = cv, train_sizes = train_sizes, scoring = 'r2')\n",
    "\n",
    "        # Find the mean and standard deviation for smoothing\n",
    "        train_std = np.std(train_scores, axis = 1)\n",
    "        train_mean = np.mean(train_scores, axis = 1)\n",
    "        test_std = np.std(test_scores, axis = 1)\n",
    "        test_mean = np.mean(test_scores, axis = 1)\n",
    "\n",
    "        # Subplot the learning curve\n",
    "        ax = fig.add_subplot(2, 2, k+1)\n",
    "        ax.plot(sizes, train_mean, 'o-', color = 'r', label = 'Training Score')\n",
    "        ax.plot(sizes, test_mean, 'o-', color = 'g', label = 'Testing Score')\n",
    "        ax.fill_between(sizes, train_mean - train_std, \\\n",
    "            train_mean + train_std, alpha = 0.15, color = 'r')\n",
    "        ax.fill_between(sizes, test_mean - test_std, \\\n",
    "            test_mean + test_std, alpha = 0.15, color = 'g')\n",
    "\n",
    "        # Labels\n",
    "        ax.set_title('max_depth = %s'%(depth))\n",
    "        ax.set_xlabel('Number of Training Points')\n",
    "        ax.set_ylabel('Score')\n",
    "        ax.set_xlim([0, X.shape[0]*0.8])\n",
    "        ax.set_ylim([-0.05, 1.05])\n",
    "\n",
    "    # Visual aesthetics\n",
    "    ax.legend(bbox_to_anchor=(1.05, 2.05), loc='lower left', borderaxespad = 0.)\n",
    "    fig.suptitle('Decision Tree Regressor Learning Performances', fontsize = 16, y = 1.03)\n",
    "    fig.tight_layout()\n",
    "    fig.show()\n",
    "\n",
    "\n",
    "def ModelComplexity(X, y):\n",
    "    \"\"\" Calculates the performance of the model as model complexity increases.\n",
    "        The learning and testing errors rates are then plotted. \"\"\"\n",
    "\n",
    "    # Create 10 cross-validation sets for training and testing\n",
    "    cv = ShuffleSplit(n_splits = 10, test_size = 0.2, random_state = 0)\n",
    "\n",
    "    # Vary the max_depth parameter from 1 to 10\n",
    "    max_depth = np.arange(1,11)\n",
    "\n",
    "    # Calculate the training and testing scores\n",
    "    train_scores, test_scores = validation_curve(DecisionTreeRegressor(), X, y, \\\n",
    "        param_name = \"max_depth\", param_range = max_depth, cv = cv, scoring = 'r2')\n",
    "\n",
    "    # Find the mean and standard deviation for smoothing\n",
    "    train_mean = np.mean(train_scores, axis=1)\n",
    "    train_std = np.std(train_scores, axis=1)\n",
    "    test_mean = np.mean(test_scores, axis=1)\n",
    "    test_std = np.std(test_scores, axis=1)\n",
    "\n",
    "    # Plot the validation curve\n",
    "    pl.figure(figsize=(7, 5))\n",
    "    pl.title('Decision Tree Regressor Complexity Performance')\n",
    "    pl.plot(max_depth, train_mean, 'o-', color = 'r', label = 'Training Score')\n",
    "    pl.plot(max_depth, test_mean, 'o-', color = 'g', label = 'Validation Score')\n",
    "    pl.fill_between(max_depth, train_mean - train_std, \\\n",
    "        train_mean + train_std, alpha = 0.15, color = 'r')\n",
    "    pl.fill_between(max_depth, test_mean - test_std, \\\n",
    "        test_mean + test_std, alpha = 0.15, color = 'g')\n",
    "\n",
    "    # Visual aesthetics\n",
    "    pl.legend(loc = 'lower right')\n",
    "    pl.xlabel('Maximum Depth')\n",
    "    pl.ylabel('Score')\n",
    "    pl.ylim([-0.05,1.05])\n",
    "    pl.show()\n",
    "\n",
    "\n",
    "def PredictTrials(X, y, fitter, data):\n",
    "    \"\"\" Performs trials of fitting and predicting data. \"\"\"\n",
    "\n",
    "    # Store the predicted prices\n",
    "    prices = []\n",
    "\n",
    "    for k in range(10):\n",
    "        # Split the data\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X, y, \\\n",
    "            test_size = 0.2, random_state = k)\n",
    "\n",
    "        # Fit the data\n",
    "        reg = fitter(X_train, y_train)\n",
    "\n",
    "        # Make a prediction\n",
    "        pred = reg.predict([data[0]])[0]\n",
    "        prices.append(pred)\n",
    "\n",
    "        # Result\n",
    "        print(\"Trial {}: ${:,.2f}\".format(k+1, pred))\n",
    "\n",
    "    # Display price range\n",
    "    print(\"\\nRange in prices: ${:,.2f}\".format(max(prices) - min(prices)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pid</th>\n",
       "      <th>fips</th>\n",
       "      <th>csd_id</th>\n",
       "      <th>ha</th>\n",
       "      <th>slope</th>\n",
       "      <th>travel</th>\n",
       "      <th>p_wet</th>\n",
       "      <th>coast_2500</th>\n",
       "      <th>river_frontage</th>\n",
       "      <th>lake_frontage</th>\n",
       "      <th>...</th>\n",
       "      <th>p_pasture</th>\n",
       "      <th>p_crops</th>\n",
       "      <th>p_wetland_w</th>\n",
       "      <th>p_wetland_e</th>\n",
       "      <th>pop_dens_bg_2012-2016</th>\n",
       "      <th>pop_dens_tract_2012-2016</th>\n",
       "      <th>hh_inc_med_bg_2012-2016</th>\n",
       "      <th>hh_inc_med_tract_2012-2016</th>\n",
       "      <th>hh_inc_avg_bg_2012-2016</th>\n",
       "      <th>hh_inc_avg_tract_2012-2016</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>M_252104_934240</td>\n",
       "      <td>25009</td>\n",
       "      <td>27900</td>\n",
       "      <td>4.633</td>\n",
       "      <td>2.676</td>\n",
       "      <td>19.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>211.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>90.83510964940001</td>\n",
       "      <td>187.169305523</td>\n",
       "      <td>93694.0</td>\n",
       "      <td>85952.0</td>\n",
       "      <td>119735.951662</td>\n",
       "      <td>100460.59246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>F_803174_3027860</td>\n",
       "      <td>25009</td>\n",
       "      <td>16250</td>\n",
       "      <td>1.138</td>\n",
       "      <td>3.269</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>475.46370303</td>\n",
       "      <td>527.5766907</td>\n",
       "      <td>71167.0</td>\n",
       "      <td>98264.0</td>\n",
       "      <td>107637.264151</td>\n",
       "      <td>111868.256722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>M_238118_942044</td>\n",
       "      <td>25009</td>\n",
       "      <td>27620</td>\n",
       "      <td>3.052</td>\n",
       "      <td>6.315</td>\n",
       "      <td>14.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>184.101298923</td>\n",
       "      <td>274.508363458</td>\n",
       "      <td>94929.0</td>\n",
       "      <td>96512.0</td>\n",
       "      <td>127585.099685</td>\n",
       "      <td>115417.941953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>F_736007_3068967</td>\n",
       "      <td>25009</td>\n",
       "      <td>01465</td>\n",
       "      <td>10.282</td>\n",
       "      <td>2.205</td>\n",
       "      <td>5.667000000000002</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.583</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>155.803789596</td>\n",
       "      <td>247.731733979</td>\n",
       "      <td>114083.0</td>\n",
       "      <td>154922.0</td>\n",
       "      <td>184615.58753</td>\n",
       "      <td>182983.421159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>M_240445_943056</td>\n",
       "      <td>25009</td>\n",
       "      <td>27620</td>\n",
       "      <td>2.165</td>\n",
       "      <td>2.5380000000000003</td>\n",
       "      <td>20.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>184.101298923</td>\n",
       "      <td>274.508363458</td>\n",
       "      <td>94929.0</td>\n",
       "      <td>96512.0</td>\n",
       "      <td>127585.099685</td>\n",
       "      <td>115417.941953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220182</td>\n",
       "      <td>M_67459_886161</td>\n",
       "      <td>25003</td>\n",
       "      <td>51580</td>\n",
       "      <td>109.997</td>\n",
       "      <td>4.771</td>\n",
       "      <td>71.333</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1640.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15.4894625064</td>\n",
       "      <td>10.3726090286</td>\n",
       "      <td>74583.0</td>\n",
       "      <td>69306.0</td>\n",
       "      <td>90927.2727273</td>\n",
       "      <td>84795.1267057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220183</td>\n",
       "      <td>F_172467_2984485</td>\n",
       "      <td>25003</td>\n",
       "      <td>53960</td>\n",
       "      <td>115.045</td>\n",
       "      <td>2.96</td>\n",
       "      <td>46.857</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>604.4</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>52.5866391531</td>\n",
       "      <td>181.477845472</td>\n",
       "      <td>78083.0</td>\n",
       "      <td>80388.0</td>\n",
       "      <td>88131.5789474</td>\n",
       "      <td>94874.911482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220184</td>\n",
       "      <td>M_66650_919364</td>\n",
       "      <td>25003</td>\n",
       "      <td>16180</td>\n",
       "      <td>164.331</td>\n",
       "      <td>7.35</td>\n",
       "      <td>98.125</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41.535155403800005</td>\n",
       "      <td>117.9707235</td>\n",
       "      <td>70982.0</td>\n",
       "      <td>55774.0</td>\n",
       "      <td>90679.2920354</td>\n",
       "      <td>74035.66111310001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220185</td>\n",
       "      <td>M_68951_894983</td>\n",
       "      <td>25003</td>\n",
       "      <td>04545</td>\n",
       "      <td>233.268</td>\n",
       "      <td>4.636</td>\n",
       "      <td>145.429</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3516.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>14.1969327517</td>\n",
       "      <td>10.0164868779</td>\n",
       "      <td>69667.0</td>\n",
       "      <td>72981.0</td>\n",
       "      <td>85203.6324786</td>\n",
       "      <td>87422.7227227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220186</td>\n",
       "      <td>M_60752_896878</td>\n",
       "      <td>25003</td>\n",
       "      <td>34655</td>\n",
       "      <td>307.052</td>\n",
       "      <td>11.848</td>\n",
       "      <td>59.462</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>72.8</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48.9935803687</td>\n",
       "      <td>83.694322035</td>\n",
       "      <td>78359.0</td>\n",
       "      <td>61507.0</td>\n",
       "      <td>99642.5389755</td>\n",
       "      <td>81625.13823899999</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>220187 rows × 55 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     pid   fips csd_id       ha               slope  \\\n",
       "0        M_252104_934240  25009  27900    4.633               2.676   \n",
       "1       F_803174_3027860  25009  16250    1.138               3.269   \n",
       "2        M_238118_942044  25009  27620    3.052               6.315   \n",
       "3       F_736007_3068967  25009  01465   10.282               2.205   \n",
       "4        M_240445_943056  25009  27620    2.165  2.5380000000000003   \n",
       "...                  ...    ...    ...      ...                 ...   \n",
       "220182    M_67459_886161  25003  51580  109.997               4.771   \n",
       "220183  F_172467_2984485  25003  53960  115.045                2.96   \n",
       "220184    M_66650_919364  25003  16180  164.331                7.35   \n",
       "220185    M_68951_894983  25003  04545  233.268               4.636   \n",
       "220186    M_60752_896878  25003  34655  307.052              11.848   \n",
       "\n",
       "                   travel p_wet coast_2500 river_frontage lake_frontage  ...  \\\n",
       "0                    19.0  16.0        0.0          211.2           0.0  ...   \n",
       "1                     8.0   0.0        0.0            0.0           0.0  ...   \n",
       "2                    14.0  10.0        0.0            0.0           0.0  ...   \n",
       "3       5.667000000000002   5.0      0.583            0.0           0.0  ...   \n",
       "4                    20.0  48.0        0.0            0.0           0.0  ...   \n",
       "...                   ...   ...        ...            ...           ...  ...   \n",
       "220182             71.333  34.0        0.0            0.0        1640.0  ...   \n",
       "220183             46.857  40.0        0.0            0.0         604.4  ...   \n",
       "220184             98.125   2.0        0.0            0.0           0.0  ...   \n",
       "220185            145.429  33.0        0.0            0.0        3516.0  ...   \n",
       "220186             59.462   4.0        0.0            0.0          72.8  ...   \n",
       "\n",
       "       p_pasture p_crops p_wetland_w p_wetland_e pop_dens_bg_2012-2016  \\\n",
       "0            0.0     0.0        42.0         0.0     90.83510964940001   \n",
       "1            0.0     0.0         0.0         0.0          475.46370303   \n",
       "2            6.0     0.0         0.0         0.0         184.101298923   \n",
       "3            0.0     0.0         7.0         1.0         155.803789596   \n",
       "4            0.0     0.0        50.0         0.0         184.101298923   \n",
       "...          ...     ...         ...         ...                   ...   \n",
       "220182       2.0     0.0        18.0         1.0         15.4894625064   \n",
       "220183       2.0     5.0        10.0         6.0         52.5866391531   \n",
       "220184       0.0     0.0         0.0         0.0    41.535155403800005   \n",
       "220185       1.0     0.0        15.0         2.0         14.1969327517   \n",
       "220186       1.0     0.0         1.0         0.0         48.9935803687   \n",
       "\n",
       "       pop_dens_tract_2012-2016 hh_inc_med_bg_2012-2016  \\\n",
       "0                 187.169305523                 93694.0   \n",
       "1                   527.5766907                 71167.0   \n",
       "2                 274.508363458                 94929.0   \n",
       "3                 247.731733979                114083.0   \n",
       "4                 274.508363458                 94929.0   \n",
       "...                         ...                     ...   \n",
       "220182            10.3726090286                 74583.0   \n",
       "220183            181.477845472                 78083.0   \n",
       "220184              117.9707235                 70982.0   \n",
       "220185            10.0164868779                 69667.0   \n",
       "220186             83.694322035                 78359.0   \n",
       "\n",
       "       hh_inc_med_tract_2012-2016 hh_inc_avg_bg_2012-2016  \\\n",
       "0                         85952.0           119735.951662   \n",
       "1                         98264.0           107637.264151   \n",
       "2                         96512.0           127585.099685   \n",
       "3                        154922.0            184615.58753   \n",
       "4                         96512.0           127585.099685   \n",
       "...                           ...                     ...   \n",
       "220182                    69306.0           90927.2727273   \n",
       "220183                    80388.0           88131.5789474   \n",
       "220184                    55774.0           90679.2920354   \n",
       "220185                    72981.0           85203.6324786   \n",
       "220186                    61507.0           99642.5389755   \n",
       "\n",
       "       hh_inc_avg_tract_2012-2016  \n",
       "0                    100460.59246  \n",
       "1                   111868.256722  \n",
       "2                   115417.941953  \n",
       "3                   182983.421159  \n",
       "4                   115417.941953  \n",
       "...                           ...  \n",
       "220182              84795.1267057  \n",
       "220183               94874.911482  \n",
       "220184          74035.66111310001  \n",
       "220185              87422.7227227  \n",
       "220186          81625.13823899999  \n",
       "\n",
       "[220187 rows x 55 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "original_dataset = pd.read_csv(\"Massachusetts Data (GE 508 PS3)/pc_MA_GE508.csv\", sep=',', error_bad_lines=False, index_col=False, dtype='unicode')\n",
    "original_dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pid</th>\n",
       "      <th>fips</th>\n",
       "      <th>csd_id</th>\n",
       "      <th>ha</th>\n",
       "      <th>slope</th>\n",
       "      <th>travel</th>\n",
       "      <th>p_wet</th>\n",
       "      <th>coast_2500</th>\n",
       "      <th>river_frontage</th>\n",
       "      <th>lake_frontage</th>\n",
       "      <th>...</th>\n",
       "      <th>p_pasture</th>\n",
       "      <th>p_crops</th>\n",
       "      <th>p_wetland_w</th>\n",
       "      <th>p_wetland_e</th>\n",
       "      <th>pop_dens_bg_2012-2016</th>\n",
       "      <th>pop_dens_tract_2012-2016</th>\n",
       "      <th>hh_inc_med_bg_2012-2016</th>\n",
       "      <th>hh_inc_med_tract_2012-2016</th>\n",
       "      <th>hh_inc_avg_bg_2012-2016</th>\n",
       "      <th>hh_inc_avg_tract_2012-2016</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>220187</td>\n",
       "      <td>220187</td>\n",
       "      <td>220187</td>\n",
       "      <td>220187</td>\n",
       "      <td>220187</td>\n",
       "      <td>218977</td>\n",
       "      <td>220187</td>\n",
       "      <td>220187</td>\n",
       "      <td>220187</td>\n",
       "      <td>220187</td>\n",
       "      <td>...</td>\n",
       "      <td>220187</td>\n",
       "      <td>220187</td>\n",
       "      <td>220187</td>\n",
       "      <td>220187</td>\n",
       "      <td>219920</td>\n",
       "      <td>219920</td>\n",
       "      <td>218284</td>\n",
       "      <td>219858</td>\n",
       "      <td>219830</td>\n",
       "      <td>219864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>unique</td>\n",
       "      <td>220187</td>\n",
       "      <td>14</td>\n",
       "      <td>350</td>\n",
       "      <td>28695</td>\n",
       "      <td>15070</td>\n",
       "      <td>4062</td>\n",
       "      <td>201</td>\n",
       "      <td>6172</td>\n",
       "      <td>2470</td>\n",
       "      <td>3493</td>\n",
       "      <td>...</td>\n",
       "      <td>101</td>\n",
       "      <td>101</td>\n",
       "      <td>101</td>\n",
       "      <td>101</td>\n",
       "      <td>3800</td>\n",
       "      <td>1270</td>\n",
       "      <td>3293</td>\n",
       "      <td>1232</td>\n",
       "      <td>3788</td>\n",
       "      <td>1265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>top</td>\n",
       "      <td>F_482072_2951965</td>\n",
       "      <td>25027</td>\n",
       "      <td>56375</td>\n",
       "      <td>1.038</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.783142658</td>\n",
       "      <td>14.1986035009</td>\n",
       "      <td>75500.0</td>\n",
       "      <td>73594.0</td>\n",
       "      <td>86512.8140704</td>\n",
       "      <td>83118.47290639997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>freq</td>\n",
       "      <td>1</td>\n",
       "      <td>45828</td>\n",
       "      <td>2277</td>\n",
       "      <td>195</td>\n",
       "      <td>2470</td>\n",
       "      <td>4612</td>\n",
       "      <td>83361</td>\n",
       "      <td>191699</td>\n",
       "      <td>210345</td>\n",
       "      <td>184770</td>\n",
       "      <td>...</td>\n",
       "      <td>174425</td>\n",
       "      <td>211422</td>\n",
       "      <td>126551</td>\n",
       "      <td>197842</td>\n",
       "      <td>1090</td>\n",
       "      <td>2878</td>\n",
       "      <td>1269</td>\n",
       "      <td>2878</td>\n",
       "      <td>1090</td>\n",
       "      <td>2878</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 55 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     pid    fips  csd_id      ha   slope  travel   p_wet  \\\n",
       "count             220187  220187  220187  220187  220187  218977  220187   \n",
       "unique            220187      14     350   28695   15070    4062     201   \n",
       "top     F_482072_2951965   25027   56375   1.038     0.0    10.0     0.0   \n",
       "freq                   1   45828    2277     195    2470    4612   83361   \n",
       "\n",
       "       coast_2500 river_frontage lake_frontage  ... p_pasture p_crops  \\\n",
       "count      220187         220187        220187  ...    220187  220187   \n",
       "unique       6172           2470          3493  ...       101     101   \n",
       "top           0.0            0.0           0.0  ...       0.0     0.0   \n",
       "freq       191699         210345        184770  ...    174425  211422   \n",
       "\n",
       "       p_wetland_w p_wetland_e pop_dens_bg_2012-2016 pop_dens_tract_2012-2016  \\\n",
       "count       220187      220187                219920                   219920   \n",
       "unique         101         101                  3800                     1270   \n",
       "top            0.0         0.0          11.783142658            14.1986035009   \n",
       "freq        126551      197842                  1090                     2878   \n",
       "\n",
       "       hh_inc_med_bg_2012-2016 hh_inc_med_tract_2012-2016  \\\n",
       "count                   218284                     219858   \n",
       "unique                    3293                       1232   \n",
       "top                    75500.0                    73594.0   \n",
       "freq                      1269                       2878   \n",
       "\n",
       "       hh_inc_avg_bg_2012-2016 hh_inc_avg_tract_2012-2016  \n",
       "count                   219830                     219864  \n",
       "unique                    3788                       1265  \n",
       "top              86512.8140704          83118.47290639997  \n",
       "freq                      1090                       2878  \n",
       "\n",
       "[4 rows x 55 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "original_dataset.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "count    9.114800e+04\n",
       "mean     1.631463e+06\n",
       "std      1.564940e+07\n",
       "min      1.020000e+02\n",
       "25%      8.000000e+04\n",
       "50%      2.400000e+05\n",
       "75%      5.500000e+05\n",
       "max      2.000000e+09\n",
       "Name: ls_price, dtype: float64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dropped_nan = original_dataset[pd.notnull(original_dataset['ls_price'])]\n",
    "df_dropped_nan[\"ls_price\"] = pd.to_numeric(df_dropped_nan[\"ls_price\"])\n",
    "df_dropped_nan[\"ls_price\"].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8398319217097467"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratio = (df_dropped_nan[(df_dropped_nan[\"ls_price\"]>1e+03)&(df_dropped_nan[\"ls_price\"]<1e+06)].ls_price).count()/df_dropped_nan['ls_price'].count()\n",
    "ratio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We ploted ls_price ranging from 10^3 to 10^6, because we found that most of our data are in between this range(84%)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1034f54d0>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df_dropped_nan[(df_dropped_nan[\"ls_price\"]>1e+03)&(df_dropped_nan[\"ls_price\"]<1e+06)].ls_price)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(220187,)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "original_dataset[\"e_year\"].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "129039"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "original_dataset[\"ls_price\"].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pid</th>\n",
       "      <th>fips</th>\n",
       "      <th>csd_id</th>\n",
       "      <th>ha</th>\n",
       "      <th>slope</th>\n",
       "      <th>travel</th>\n",
       "      <th>p_wet</th>\n",
       "      <th>coast_2500</th>\n",
       "      <th>river_frontage</th>\n",
       "      <th>lake_frontage</th>\n",
       "      <th>...</th>\n",
       "      <th>p_pasture</th>\n",
       "      <th>p_crops</th>\n",
       "      <th>p_wetland_w</th>\n",
       "      <th>p_wetland_e</th>\n",
       "      <th>pop_dens_bg_2012-2016</th>\n",
       "      <th>pop_dens_tract_2012-2016</th>\n",
       "      <th>hh_inc_med_bg_2012-2016</th>\n",
       "      <th>hh_inc_med_tract_2012-2016</th>\n",
       "      <th>hh_inc_avg_bg_2012-2016</th>\n",
       "      <th>hh_inc_avg_tract_2012-2016</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>M_238118_942044</td>\n",
       "      <td>25009</td>\n",
       "      <td>27620</td>\n",
       "      <td>3.052</td>\n",
       "      <td>6.315</td>\n",
       "      <td>14.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>184.101298923</td>\n",
       "      <td>274.508363458</td>\n",
       "      <td>94929.0</td>\n",
       "      <td>96512.0</td>\n",
       "      <td>127585.099685</td>\n",
       "      <td>115417.941953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>M_245474_951109</td>\n",
       "      <td>25009</td>\n",
       "      <td>77150</td>\n",
       "      <td>2.162</td>\n",
       "      <td>1.784</td>\n",
       "      <td>19.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>79.1425453629</td>\n",
       "      <td>117.578600996</td>\n",
       "      <td>122625.0</td>\n",
       "      <td>138947.0</td>\n",
       "      <td>168559.326425</td>\n",
       "      <td>163715.534591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>F_778757_3113679</td>\n",
       "      <td>25009</td>\n",
       "      <td>29405</td>\n",
       "      <td>7.07</td>\n",
       "      <td>7.645</td>\n",
       "      <td>8.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.133</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>400.262700439</td>\n",
       "      <td>710.834273084</td>\n",
       "      <td>87635.0</td>\n",
       "      <td>72132.0</td>\n",
       "      <td>102680.276817</td>\n",
       "      <td>86602.8950543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>M_252159_944747</td>\n",
       "      <td>25009</td>\n",
       "      <td>45175</td>\n",
       "      <td>1.69</td>\n",
       "      <td>0.455</td>\n",
       "      <td>30.0</td>\n",
       "      <td>116.0</td>\n",
       "      <td>3.333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>218.8</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>159.475431672</td>\n",
       "      <td>106.76454956399999</td>\n",
       "      <td>114858.0</td>\n",
       "      <td>92454.0</td>\n",
       "      <td>134492.27941199995</td>\n",
       "      <td>113806.32820899998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>M_241788_954475</td>\n",
       "      <td>25009</td>\n",
       "      <td>40430</td>\n",
       "      <td>1.558</td>\n",
       "      <td>0.605</td>\n",
       "      <td>9.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>3.111</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>377.067067216</td>\n",
       "      <td>290.363290548</td>\n",
       "      <td>69302.0</td>\n",
       "      <td>77481.0</td>\n",
       "      <td>90219.4359756</td>\n",
       "      <td>99560.0908747</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220170</td>\n",
       "      <td>M_63337_939722</td>\n",
       "      <td>25003</td>\n",
       "      <td>46225</td>\n",
       "      <td>51.938</td>\n",
       "      <td>2.139</td>\n",
       "      <td>55.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>152.146423432</td>\n",
       "      <td>172.792951972</td>\n",
       "      <td>41033.0</td>\n",
       "      <td>41959.0</td>\n",
       "      <td>52561.66484119999</td>\n",
       "      <td>50907.168458800006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220176</td>\n",
       "      <td>M_62048_894386</td>\n",
       "      <td>25003</td>\n",
       "      <td>34655</td>\n",
       "      <td>77.493</td>\n",
       "      <td>10.243</td>\n",
       "      <td>59.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>823.6</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41.453753689</td>\n",
       "      <td>83.694322035</td>\n",
       "      <td>97000.0</td>\n",
       "      <td>61507.0</td>\n",
       "      <td>106710.747664</td>\n",
       "      <td>81625.13823899999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220178</td>\n",
       "      <td>M_74987_889210</td>\n",
       "      <td>25003</td>\n",
       "      <td>04545</td>\n",
       "      <td>89.44200000000002</td>\n",
       "      <td>9.172</td>\n",
       "      <td>41.429</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>381.2</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.432744021</td>\n",
       "      <td>10.0164868779</td>\n",
       "      <td>74286.0</td>\n",
       "      <td>72981.0</td>\n",
       "      <td>89094.13793099998</td>\n",
       "      <td>87422.7227227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220181</td>\n",
       "      <td>M_58323_896882</td>\n",
       "      <td>25003</td>\n",
       "      <td>34655</td>\n",
       "      <td>99.319</td>\n",
       "      <td>11.374</td>\n",
       "      <td>47.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48.9935803687</td>\n",
       "      <td>83.694322035</td>\n",
       "      <td>78359.0</td>\n",
       "      <td>61507.0</td>\n",
       "      <td>99642.5389755</td>\n",
       "      <td>81625.13823899999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220182</td>\n",
       "      <td>M_67459_886161</td>\n",
       "      <td>25003</td>\n",
       "      <td>51580</td>\n",
       "      <td>109.997</td>\n",
       "      <td>4.771</td>\n",
       "      <td>71.333</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1640.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15.4894625064</td>\n",
       "      <td>10.3726090286</td>\n",
       "      <td>74583.0</td>\n",
       "      <td>69306.0</td>\n",
       "      <td>90927.2727273</td>\n",
       "      <td>84795.1267057</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>76549 rows × 55 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     pid   fips csd_id                 ha   slope  travel  \\\n",
       "2        M_238118_942044  25009  27620              3.052   6.315    14.0   \n",
       "5        M_245474_951109  25009  77150              2.162   1.784    19.0   \n",
       "6       F_778757_3113679  25009  29405               7.07   7.645     8.0   \n",
       "14       M_252159_944747  25009  45175               1.69   0.455    30.0   \n",
       "16       M_241788_954475  25009  40430              1.558   0.605     9.0   \n",
       "...                  ...    ...    ...                ...     ...     ...   \n",
       "220170    M_63337_939722  25003  46225             51.938   2.139    55.0   \n",
       "220176    M_62048_894386  25003  34655             77.493  10.243    59.0   \n",
       "220178    M_74987_889210  25003  04545  89.44200000000002   9.172  41.429   \n",
       "220181    M_58323_896882  25003  34655             99.319  11.374    47.0   \n",
       "220182    M_67459_886161  25003  51580            109.997   4.771  71.333   \n",
       "\n",
       "        p_wet coast_2500 river_frontage lake_frontage  ... p_pasture p_crops  \\\n",
       "2        10.0        0.0            0.0           0.0  ...       6.0     0.0   \n",
       "5        21.0        7.0            0.0           0.0  ...      52.0     0.0   \n",
       "6         4.0      4.133            0.0           0.0  ...       0.0     0.0   \n",
       "14      116.0      3.333            0.0         218.8  ...       0.0     0.0   \n",
       "16       46.0      3.111            0.0           0.0  ...       6.0     0.0   \n",
       "...       ...        ...            ...           ...  ...       ...     ...   \n",
       "220170   32.0        0.0            0.0           0.0  ...      11.0    14.0   \n",
       "220176    1.0        0.0            0.0         823.6  ...       0.0     0.0   \n",
       "220178    7.0        0.0            0.0         381.2  ...       0.0     0.0   \n",
       "220181    4.0        0.0            0.0           0.0  ...       0.0     0.0   \n",
       "220182   34.0        0.0            0.0        1640.0  ...       2.0     0.0   \n",
       "\n",
       "       p_wetland_w p_wetland_e pop_dens_bg_2012-2016 pop_dens_tract_2012-2016  \\\n",
       "2              0.0         0.0         184.101298923            274.508363458   \n",
       "5              0.0        17.0         79.1425453629            117.578600996   \n",
       "6             15.0         0.0         400.262700439            710.834273084   \n",
       "14            16.0        74.0         159.475431672       106.76454956399999   \n",
       "16            18.0         0.0         377.067067216            290.363290548   \n",
       "...            ...         ...                   ...                      ...   \n",
       "220170        14.0         0.0         152.146423432            172.792951972   \n",
       "220176         0.0         0.0          41.453753689             83.694322035   \n",
       "220178         6.0         0.0          13.432744021            10.0164868779   \n",
       "220181         3.0         0.0         48.9935803687             83.694322035   \n",
       "220182        18.0         1.0         15.4894625064            10.3726090286   \n",
       "\n",
       "       hh_inc_med_bg_2012-2016 hh_inc_med_tract_2012-2016  \\\n",
       "2                      94929.0                    96512.0   \n",
       "5                     122625.0                   138947.0   \n",
       "6                      87635.0                    72132.0   \n",
       "14                    114858.0                    92454.0   \n",
       "16                     69302.0                    77481.0   \n",
       "...                        ...                        ...   \n",
       "220170                 41033.0                    41959.0   \n",
       "220176                 97000.0                    61507.0   \n",
       "220178                 74286.0                    72981.0   \n",
       "220181                 78359.0                    61507.0   \n",
       "220182                 74583.0                    69306.0   \n",
       "\n",
       "       hh_inc_avg_bg_2012-2016 hh_inc_avg_tract_2012-2016  \n",
       "2                127585.099685              115417.941953  \n",
       "5                168559.326425              163715.534591  \n",
       "6                102680.276817              86602.8950543  \n",
       "14          134492.27941199995         113806.32820899998  \n",
       "16               90219.4359756              99560.0908747  \n",
       "...                        ...                        ...  \n",
       "220170       52561.66484119999         50907.168458800006  \n",
       "220176           106710.747664          81625.13823899999  \n",
       "220178       89094.13793099998              87422.7227227  \n",
       "220181           99642.5389755          81625.13823899999  \n",
       "220182           90927.2727273              84795.1267057  \n",
       "\n",
       "[76549 rows x 55 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_filtered_listing_price = df_dropped_nan[(df_dropped_nan[\"ls_price\"]>1e+03)&(df_dropped_nan[\"ls_price\"]<1e+06)]\n",
    "df_filtered_listing_price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "25027    18908\n",
       "25003     8742\n",
       "25017     8265\n",
       "25023     6592\n",
       "25015     6161\n",
       "25011     5983\n",
       "25005     5882\n",
       "25013     5236\n",
       "25009     4675\n",
       "25021     2994\n",
       "25001     1914\n",
       "25007      894\n",
       "25019      294\n",
       "25025        9\n",
       "Name: fips, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_filtered_listing_price[\"fips\"] = pd.to_numeric(df_filtered_listing_price[\"fips\"])\n",
    "sns.distplot(df_filtered_listing_price['fips'], kde=False, rug=True);\n",
    "df_filtered_listing_price['fips'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape (76549, 55)\n",
      "easement rows number 5386\n"
     ]
    }
   ],
   "source": [
    "print(\"shape\", df_filtered_listing_price.shape)\n",
    "print(\"easement rows number\", df_filtered_listing_price['e_year'].count())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0703601614652053"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#ratio of easement lands\n",
    "5386/76549"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2            NaN\n",
       "5            NaN\n",
       "6            NaN\n",
       "14           NaN\n",
       "16           NaN\n",
       "           ...  \n",
       "220170       NaN\n",
       "220176       NaN\n",
       "220178       NaN\n",
       "220181    2000.0\n",
       "220182       NaN\n",
       "Name: e_year, Length: 76549, dtype: object"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_df = df_filtered_listing_price.drop(['pid','csd_id','f_orgtype', 'e_orgtype', 'owner_pc', 'ls_date'], axis=1)\n",
    "cleaned_df['e_year']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "cleaned_df['e_year'] = cleaned_df['e_year'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "for col in  cleaned_df.columns:\n",
    "    cleaned_df[col] = pd.to_numeric(cleaned_df[col], errors='coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['fips', 'ha', 'slope', 'travel', 'p_wet', 'coast_2500',\n",
       "       'river_frontage', 'lake_frontage', 'lake_importance', 'p_f', 'f_year',\n",
       "       'p_e', 'e_year', 'p_prot', 'bld_area', 'ls_price', 'p_d_1990_200',\n",
       "       'p_d_1990_1000', 'p_d_1990_5000', 'p_d_2000_200', 'p_d_2000_1000',\n",
       "       'p_d_2000_5000', 'p_prot_1990_500', 'p_prot_2000_200',\n",
       "       'p_prot_2000_500', 'p_f_1990', 'p_f_2000', 'p_f_2010', 'p_water',\n",
       "       'p_dev_open', 'p_dev_low', 'p_dev_medium', 'p_dev_high', 'p_barren',\n",
       "       'p_forest_d', 'p_forest_e', 'p_forest_m', 'p_shrub', 'p_grassland',\n",
       "       'p_pasture', 'p_crops', 'p_wetland_w', 'p_wetland_e',\n",
       "       'pop_dens_bg_2012-2016', 'pop_dens_tract_2012-2016',\n",
       "       'hh_inc_med_bg_2012-2016', 'hh_inc_med_tract_2012-2016',\n",
       "       'hh_inc_avg_bg_2012-2016', 'hh_inc_avg_tract_2012-2016'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bool_easement(row):\n",
    "        if row['e_year']==0:\n",
    "            return 0\n",
    "        else:\n",
    "            return 1\n",
    "\n",
    "cleaned_df['Easement or Not'] = cleaned_df.apply (lambda row: bool_easement(row), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fips</th>\n",
       "      <th>ha</th>\n",
       "      <th>slope</th>\n",
       "      <th>travel</th>\n",
       "      <th>p_wet</th>\n",
       "      <th>coast_2500</th>\n",
       "      <th>river_frontage</th>\n",
       "      <th>lake_frontage</th>\n",
       "      <th>lake_importance</th>\n",
       "      <th>p_f</th>\n",
       "      <th>...</th>\n",
       "      <th>p_crops</th>\n",
       "      <th>p_wetland_w</th>\n",
       "      <th>p_wetland_e</th>\n",
       "      <th>pop_dens_bg_2012-2016</th>\n",
       "      <th>pop_dens_tract_2012-2016</th>\n",
       "      <th>hh_inc_med_bg_2012-2016</th>\n",
       "      <th>hh_inc_med_tract_2012-2016</th>\n",
       "      <th>hh_inc_avg_bg_2012-2016</th>\n",
       "      <th>hh_inc_avg_tract_2012-2016</th>\n",
       "      <th>Easement or Not</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>25009</td>\n",
       "      <td>3.052</td>\n",
       "      <td>6.315</td>\n",
       "      <td>14.000</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>184.101299</td>\n",
       "      <td>274.508363</td>\n",
       "      <td>94929.0</td>\n",
       "      <td>96512.0</td>\n",
       "      <td>127585.099685</td>\n",
       "      <td>115417.941953</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>25009</td>\n",
       "      <td>2.162</td>\n",
       "      <td>1.784</td>\n",
       "      <td>19.000</td>\n",
       "      <td>21.0</td>\n",
       "      <td>7.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>79.142545</td>\n",
       "      <td>117.578601</td>\n",
       "      <td>122625.0</td>\n",
       "      <td>138947.0</td>\n",
       "      <td>168559.326425</td>\n",
       "      <td>163715.534591</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>25009</td>\n",
       "      <td>7.070</td>\n",
       "      <td>7.645</td>\n",
       "      <td>8.000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.133</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>400.262700</td>\n",
       "      <td>710.834273</td>\n",
       "      <td>87635.0</td>\n",
       "      <td>72132.0</td>\n",
       "      <td>102680.276817</td>\n",
       "      <td>86602.895054</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>25009</td>\n",
       "      <td>1.690</td>\n",
       "      <td>0.455</td>\n",
       "      <td>30.000</td>\n",
       "      <td>116.0</td>\n",
       "      <td>3.333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>218.8</td>\n",
       "      <td>360.414</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>159.475432</td>\n",
       "      <td>106.764550</td>\n",
       "      <td>114858.0</td>\n",
       "      <td>92454.0</td>\n",
       "      <td>134492.279412</td>\n",
       "      <td>113806.328209</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>25009</td>\n",
       "      <td>1.558</td>\n",
       "      <td>0.605</td>\n",
       "      <td>9.000</td>\n",
       "      <td>46.0</td>\n",
       "      <td>3.111</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>377.067067</td>\n",
       "      <td>290.363291</td>\n",
       "      <td>69302.0</td>\n",
       "      <td>77481.0</td>\n",
       "      <td>90219.435976</td>\n",
       "      <td>99560.090875</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220170</td>\n",
       "      <td>25003</td>\n",
       "      <td>51.938</td>\n",
       "      <td>2.139</td>\n",
       "      <td>55.000</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>152.146423</td>\n",
       "      <td>172.792952</td>\n",
       "      <td>41033.0</td>\n",
       "      <td>41959.0</td>\n",
       "      <td>52561.664841</td>\n",
       "      <td>50907.168459</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220176</td>\n",
       "      <td>25003</td>\n",
       "      <td>77.493</td>\n",
       "      <td>10.243</td>\n",
       "      <td>59.000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>823.6</td>\n",
       "      <td>3251.459</td>\n",
       "      <td>100.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41.453754</td>\n",
       "      <td>83.694322</td>\n",
       "      <td>97000.0</td>\n",
       "      <td>61507.0</td>\n",
       "      <td>106710.747664</td>\n",
       "      <td>81625.138239</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220178</td>\n",
       "      <td>25003</td>\n",
       "      <td>89.442</td>\n",
       "      <td>9.172</td>\n",
       "      <td>41.429</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>381.2</td>\n",
       "      <td>148.681</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.432744</td>\n",
       "      <td>10.016487</td>\n",
       "      <td>74286.0</td>\n",
       "      <td>72981.0</td>\n",
       "      <td>89094.137931</td>\n",
       "      <td>87422.722723</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220181</td>\n",
       "      <td>25003</td>\n",
       "      <td>99.319</td>\n",
       "      <td>11.374</td>\n",
       "      <td>47.000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48.993580</td>\n",
       "      <td>83.694322</td>\n",
       "      <td>78359.0</td>\n",
       "      <td>61507.0</td>\n",
       "      <td>99642.538975</td>\n",
       "      <td>81625.138239</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220182</td>\n",
       "      <td>25003</td>\n",
       "      <td>109.997</td>\n",
       "      <td>4.771</td>\n",
       "      <td>71.333</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1640.0</td>\n",
       "      <td>1523.297</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15.489463</td>\n",
       "      <td>10.372609</td>\n",
       "      <td>74583.0</td>\n",
       "      <td>69306.0</td>\n",
       "      <td>90927.272727</td>\n",
       "      <td>84795.126706</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>76549 rows × 50 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         fips       ha   slope  travel  p_wet  coast_2500  river_frontage  \\\n",
       "2       25009    3.052   6.315  14.000   10.0       0.000             0.0   \n",
       "5       25009    2.162   1.784  19.000   21.0       7.000             0.0   \n",
       "6       25009    7.070   7.645   8.000    4.0       4.133             0.0   \n",
       "14      25009    1.690   0.455  30.000  116.0       3.333             0.0   \n",
       "16      25009    1.558   0.605   9.000   46.0       3.111             0.0   \n",
       "...       ...      ...     ...     ...    ...         ...             ...   \n",
       "220170  25003   51.938   2.139  55.000   32.0       0.000             0.0   \n",
       "220176  25003   77.493  10.243  59.000    1.0       0.000             0.0   \n",
       "220178  25003   89.442   9.172  41.429    7.0       0.000             0.0   \n",
       "220181  25003   99.319  11.374  47.000    4.0       0.000             0.0   \n",
       "220182  25003  109.997   4.771  71.333   34.0       0.000             0.0   \n",
       "\n",
       "        lake_frontage  lake_importance    p_f  ...  p_crops  p_wetland_w  \\\n",
       "2                 0.0            0.000    0.0  ...      0.0          0.0   \n",
       "5                 0.0            0.000    0.0  ...      0.0          0.0   \n",
       "6                 0.0            0.000    0.0  ...      0.0         15.0   \n",
       "14              218.8          360.414    0.0  ...      0.0         16.0   \n",
       "16                0.0            0.000    0.0  ...      0.0         18.0   \n",
       "...               ...              ...    ...  ...      ...          ...   \n",
       "220170            0.0            0.000    0.0  ...     14.0         14.0   \n",
       "220176          823.6         3251.459  100.0  ...      0.0          0.0   \n",
       "220178          381.2          148.681    0.0  ...      0.0          6.0   \n",
       "220181            0.0            0.000    0.0  ...      0.0          3.0   \n",
       "220182         1640.0         1523.297    0.0  ...      0.0         18.0   \n",
       "\n",
       "        p_wetland_e  pop_dens_bg_2012-2016  pop_dens_tract_2012-2016  \\\n",
       "2               0.0             184.101299                274.508363   \n",
       "5              17.0              79.142545                117.578601   \n",
       "6               0.0             400.262700                710.834273   \n",
       "14             74.0             159.475432                106.764550   \n",
       "16              0.0             377.067067                290.363291   \n",
       "...             ...                    ...                       ...   \n",
       "220170          0.0             152.146423                172.792952   \n",
       "220176          0.0              41.453754                 83.694322   \n",
       "220178          0.0              13.432744                 10.016487   \n",
       "220181          0.0              48.993580                 83.694322   \n",
       "220182          1.0              15.489463                 10.372609   \n",
       "\n",
       "        hh_inc_med_bg_2012-2016  hh_inc_med_tract_2012-2016  \\\n",
       "2                       94929.0                     96512.0   \n",
       "5                      122625.0                    138947.0   \n",
       "6                       87635.0                     72132.0   \n",
       "14                     114858.0                     92454.0   \n",
       "16                      69302.0                     77481.0   \n",
       "...                         ...                         ...   \n",
       "220170                  41033.0                     41959.0   \n",
       "220176                  97000.0                     61507.0   \n",
       "220178                  74286.0                     72981.0   \n",
       "220181                  78359.0                     61507.0   \n",
       "220182                  74583.0                     69306.0   \n",
       "\n",
       "        hh_inc_avg_bg_2012-2016  hh_inc_avg_tract_2012-2016  Easement or Not  \n",
       "2                 127585.099685               115417.941953                0  \n",
       "5                 168559.326425               163715.534591                0  \n",
       "6                 102680.276817                86602.895054                0  \n",
       "14                134492.279412               113806.328209                0  \n",
       "16                 90219.435976                99560.090875                0  \n",
       "...                         ...                         ...              ...  \n",
       "220170             52561.664841                50907.168459                0  \n",
       "220176            106710.747664                81625.138239                0  \n",
       "220178             89094.137931                87422.722723                0  \n",
       "220181             99642.538975                81625.138239                1  \n",
       "220182             90927.272727                84795.126706                0  \n",
       "\n",
       "[76549 rows x 50 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a19d99d10>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 3600x3600 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cleaned_df = cleaned_df.fillna(0)\n",
    "corr_mat = cleaned_df.corr(method ='pearson')['ls_price']\n",
    "plt.figure(figsize=(50,50))\n",
    "sns.heatmap(corr_mat.to_frame(),vmax=1,square=True,annot=True,cmap='cubehelix')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fips                          0.010144\n",
       "ha                           -0.017253\n",
       "slope                        -0.113005\n",
       "travel                       -0.168820\n",
       "p_wet                         0.010317\n",
       "coast_2500                    0.089087\n",
       "river_frontage                0.001110\n",
       "lake_frontage                 0.024673\n",
       "lake_importance               0.007360\n",
       "p_f                          -0.052378\n",
       "f_year                       -0.028742\n",
       "p_e                           0.017792\n",
       "e_year                        0.007601\n",
       "p_prot                       -0.042802\n",
       "bld_area                      0.129307\n",
       "ls_price                      1.000000\n",
       "p_d_1990_200                  0.173897\n",
       "p_d_1990_1000                 0.189239\n",
       "p_d_1990_5000                 0.225453\n",
       "p_d_2000_200                  0.181994\n",
       "p_d_2000_1000                 0.194655\n",
       "p_d_2000_5000                 0.227920\n",
       "p_prot_1990_500              -0.000945\n",
       "p_prot_2000_200              -0.017033\n",
       "p_prot_2000_500               0.001990\n",
       "p_f_1990                     -0.142862\n",
       "p_f_2000                     -0.148536\n",
       "p_f_2010                     -0.162582\n",
       "p_water                       0.019591\n",
       "p_dev_open                    0.055752\n",
       "p_dev_low                     0.131786\n",
       "p_dev_medium                  0.148933\n",
       "p_dev_high                    0.125958\n",
       "p_barren                      0.018281\n",
       "p_forest_d                   -0.070199\n",
       "p_forest_e                   -0.005479\n",
       "p_forest_m                   -0.141254\n",
       "p_shrub                       0.007092\n",
       "p_grassland                   0.038969\n",
       "p_pasture                     0.014332\n",
       "p_crops                      -0.003413\n",
       "p_wetland_w                  -0.004888\n",
       "p_wetland_e                   0.027733\n",
       "pop_dens_bg_2012-2016         0.113410\n",
       "pop_dens_tract_2012-2016      0.131942\n",
       "hh_inc_med_bg_2012-2016       0.245464\n",
       "hh_inc_med_tract_2012-2016    0.270705\n",
       "hh_inc_avg_bg_2012-2016       0.279426\n",
       "hh_inc_avg_tract_2012-2016    0.300182\n",
       "Easement or Not               0.007241\n",
       "Name: ls_price, dtype: float64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_mat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "cleaned_df = cleaned_df.drop(['e_year'], axis= 1)\n",
    "train_input = cleaned_df.drop(['ls_price'], axis = 1)\n",
    "sale_price_input = cleaned_df['ls_price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "train_input = scaler.fit_transform(train_input)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/regression.py:543: UndefinedMetricWarning: R^2 score is not well-defined with less than two samples.\n",
      "  warnings.warn(msg, UndefinedMetricWarning)\n",
      "/Users/kailunli/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:57: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ModelLearning(train_input, sale_price_input)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ModelComplexity(train_input, sale_price_input)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "info_train, info_test, sale_train, sale_test = train_test_split(train_input,sale_price_input, test_size = 0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.27322999462276276"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "est = GradientBoostingRegressor(n_estimators=1000, max_depth = 2)\n",
    "est.fit(info_train, sale_train)\n",
    "est.score(info_test,sale_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# logistic_reg = LogisticRegression()\n",
    "# logistic_reg.fit(info_train, sale_train)\n",
    "# training_accuracy = accuracy_score(sale_test, logistic_reg.predict(info_test))\n",
    "# training_accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.017700849118223384"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressor = DecisionTreeRegressor()\n",
    "regressor.fit(info_train, sale_train)\n",
    "training_accuracy = accuracy_score(sale_test, regressor.predict(info_test))\n",
    "training_accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.metrics import make_scorer\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import r2_score\n",
    "\n",
    "def performance_metric(y_true, y_predict):\n",
    "    \"\"\" Calculates and returns the performance score between \n",
    "        true and predicted values based on the metric chosen. \"\"\"\n",
    "    \n",
    "    # TODO: Calculate the performance score between 'y_true' and 'y_predict'\n",
    "    score = r2_score(y_true, y_predict)\n",
    "    \n",
    "    # Return the score\n",
    "    return score\n",
    "\n",
    "def fit_model(X, y):\n",
    "    \"\"\" Performs grid search over the 'max_depth' parameter for a \n",
    "        decision tree regressor trained on the input data [X, y]. \"\"\"\n",
    "    \n",
    "    # Create cross-validation sets from the training data\n",
    "    cv_sets = ShuffleSplit(n_splits = 10, test_size = 0.20, random_state = 0)\n",
    "\n",
    "    # Create a decision tree regressor object\n",
    "    regressor = DecisionTreeRegressor()\n",
    "\n",
    "    # Create a dictionary for the parameter 'max_depth' with a range from 1 to 10\n",
    "    params = {'max_depth':[1,2,3,4,5,6,7,8,9,10]}\n",
    "\n",
    "    # Transform 'performance_metric' into a scoring function using 'make_scorer' \n",
    "    scoring_fnc = make_scorer(performance_metric)\n",
    "\n",
    "    # Create the grid search cv object --> GridSearchCV()\n",
    "    # Make sure to include the right parameters in the object:\n",
    "    # (estimator, param_grid, scoring, cv) which have values 'regressor', 'params', 'scoring_fnc', and 'cv_sets' respectively.\n",
    "    grid = GridSearchCV(estimator=regressor, param_grid=params, scoring=scoring_fnc, cv=cv_sets)\n",
    "\n",
    "    # Fit the grid search object to the data to compute the optimal model\n",
    "    grid = grid.fit(X, y)\n",
    "\n",
    "    # Return the optimal model after fitting the data\n",
    "    return grid.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "regressor = fit_model(info_train, sale_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.21159006447001372"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressor.score(info_test,sale_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for pred in est.staged_predict(info_train):\n",
    "    plt.plot(info_train[:,0],pred, color='r', alpha=0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
